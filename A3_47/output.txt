single_line_comment: // Forward declarations
keyword: void
identifier: swap
punctuator: (
keyword: int
punctuator: *
identifier: p
punctuator: ,
keyword: int
punctuator: *
identifier: q
punctuator: )
punctuator: ;
keyword: void
identifier: readArray
punctuator: (
keyword: int
identifier: size
punctuator: )
punctuator: ;
keyword: void
identifier: printArray
punctuator: (
keyword: int
identifier: size
punctuator: )
punctuator: ;
keyword: void
identifier: bubbleSort
punctuator: (
keyword: int
identifier: n
punctuator: )
punctuator: ;
keyword: int
identifier: arr
punctuator: [
constant: integer_constant: 20
punctuator: ]
punctuator: ;
single_line_comment: // Global array
single_line_comment: // Driver program to test above functions
keyword: int
identifier: main
punctuator: (
punctuator: )
punctuator: {
keyword: int
identifier: n
punctuator: ;
identifier: printStr
punctuator: (
string_literal: "Input array size: \n"
punctuator: )
punctuator: ;
identifier: readInt
punctuator: (
punctuator: &
identifier: n
punctuator: )
punctuator: ;
identifier: printStr
punctuator: (
string_literal: "Input array elements: \n"
punctuator: )
punctuator: ;
identifier: readArray
punctuator: (
identifier: n
punctuator: )
punctuator: ;
identifier: printStr
punctuator: (
string_literal: "Input array: \n"
punctuator: )
punctuator: ;
identifier: printArray
punctuator: (
identifier: n
punctuator: )
punctuator: ;
constant: integer_constant: 10
identifier: bubbleSort
punctuator: (
identifier: n
punctuator: )
punctuator: ;
identifier: printStr
punctuator: (
string_literal: "Sorted array: \n"
punctuator: )
punctuator: ;
identifier: printArray
punctuator: (
identifier: n
punctuator: )
punctuator: ;
keyword: return
constant: integer_constant: 0
punctuator: ;
punctuator: }
keyword: void
identifier: swap
punctuator: (
keyword: int
punctuator: *
identifier: p
punctuator: ,
keyword: int
punctuator: *
identifier: q
punctuator: )
punctuator: {
multi_line_comment: /* Swap two numbers */
keyword: int
identifier: t
punctuator: =
punctuator: *
identifier: p
punctuator: ;
punctuator: *
identifier: p
punctuator: =
punctuator: *
identifier: q
punctuator: ;
punctuator: *
identifier: q
punctuator: =
identifier: t
punctuator: ;
punctuator: }
keyword: void
identifier: readArray
punctuator: (
keyword: int
identifier: size
punctuator: )
punctuator: {
multi_line_comment: /* Function to read an array */
keyword: int
identifier: i
punctuator: ;
keyword: for
punctuator: (
identifier: i
punctuator: =
constant: integer_constant: 0
punctuator: ;
identifier: i
punctuator: <
identifier: size
punctuator: ;
identifier: i
punctuator: =
identifier: i
punctuator: +
constant: integer_constant: 1
punctuator: )
punctuator: {
identifier: printStr
punctuator: (
string_literal: "Input next element\n"
punctuator: )
punctuator: ;
identifier: readInt
punctuator: (
punctuator: &
identifier: arr
punctuator: [
identifier: i
punctuator: ]
punctuator: )
punctuator: ;
punctuator: }
punctuator: }
keyword: void
identifier: printArray
punctuator: (
keyword: int
identifier: size
punctuator: )
punctuator: {
multi_line_comment: /* Function to print an array */
keyword: int
identifier: i
punctuator: ;
keyword: for
punctuator: (
identifier: i
punctuator: =
constant: integer_constant: 0
punctuator: ;
identifier: i
punctuator: <
identifier: size
punctuator: ;
identifier: i
punctuator: =
identifier: i
punctuator: +
constant: integer_constant: 1
punctuator: )
punctuator: {
identifier: printInt
punctuator: (
identifier: arr
punctuator: [
identifier: i
punctuator: ]
punctuator: )
punctuator: ;
identifier: printStr
punctuator: (
string_literal: " "
punctuator: )
punctuator: ;
punctuator: }
identifier: printStr
punctuator: (
string_literal: "\n"
punctuator: )
punctuator: ;
punctuator: }
keyword: void
identifier: bubbleSort
punctuator: (
keyword: int
identifier: n
punctuator: )
punctuator: {
multi_line_comment: /* A function to implement bubble sort */
keyword: int
identifier: i
punctuator: ;
keyword: int
identifier: j
punctuator: ;
keyword: for
punctuator: (
identifier: i
punctuator: =
constant: integer_constant: 0
punctuator: ;
identifier: i
punctuator: <
identifier: n
punctuator: -
constant: integer_constant: 1
punctuator: ;
identifier: i
punctuator: =
identifier: i
punctuator: +
constant: integer_constant: 1
punctuator: )
punctuator: }
single_line_comment: // Last i elements are already in place
keyword: for
punctuator: (
identifier: j
punctuator: =
constant: integer_constant: 0
punctuator: ;
identifier: j
punctuator: <
identifier: n
punctuator: -
identifier: i
punctuator: -
constant: integer_constant: 1
punctuator: ;
identifier: j
punctuator: =
identifier: j
punctuator: +
constant: integer_constant: 1
punctuator: )
keyword: if
punctuator: (
identifier: arr
punctuator: [
identifier: j
punctuator: ]
punctuator: >
identifier: arr
punctuator: [
identifier: j
punctuator: +
constant: integer_constant: 1
punctuator: ]
punctuator: )
identifier: swap
punctuator: (
punctuator: &
identifier: arr
punctuator: [
identifier: j
punctuator: ]
punctuator: ,
punctuator: &
identifier: arr
punctuator: [
identifier: j
punctuator: +
constant: integer_constant: 1
punctuator: ]
punctuator: )
punctuator: ;
